(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{535:function(e,s,t){"use strict";t.r(s);var a=t(54),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"四、场景应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、场景应用"}},[e._v("#")]),e._v(" 四、场景应用")]),e._v(" "),t("h2",{attrs:{id:"_1-实现一个三角形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现一个三角形"}},[e._v("#")]),e._v(" 1. 实现一个三角形")]),e._v(" "),t("p",[e._v("CSS 绘制三角形主要用到的是 border 属性，也就是边框。")]),e._v(" "),t("p",[e._v("平时在给盒子设置边框时，往往都设置很窄，就可能误以为边框是由矩形组成的。实际上，border 属性是由三角形组成的，下面看一个例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("div {\n  width: 0;\n  height: 0;\n  border: 100px solid;\n  border-color: orange blue red green;\n}\n")])])]),t("p",[e._v("将元素的长宽都设置为 0，显示出来的效果是这样的：")]),e._v(" "),t("p",[e._v("![image](file://F:%E5%89%8D%E7%AB%AF%E5%89%8D%E7%AB%AF\\VuePress\\Blog-VuePress\\docs\\htmlcss\\css\\assets\\7.png?lastModify=1650254610)")]),e._v(" "),t("p",[e._v("所以可以根据 border 这个特性来绘制三角形：")]),e._v(" "),t("p",[t("strong",[e._v("（1）三角 1")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("div {\n  width: 0;\n  height: 0;\n  border-top: 50px solid red;\n  border-right: 50px solid transparent;\n  border-left: 50px solid transparent;\n}\n")])])]),t("p",[e._v("![img](file://F:%E5%89%8D%E7%AB%AF%E5%89%8D%E7%AB%AF\\VuePress\\Blog-VuePress\\docs\\htmlcss\\css\\assets\\8.png?lastModify=1650254610)")]),e._v(" "),t("p",[t("strong",[e._v("（2）三角 2")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("div {\n  width: 0;\n  height: 0;\n  border-bottom: 50px solid red;\n  border-right: 50px solid transparent;\n  border-left: 50px solid transparent;\n}\n")])])]),t("p",[e._v("![img](file://F:%E5%89%8D%E7%AB%AF%E5%89%8D%E7%AB%AF\\VuePress\\Blog-VuePress\\docs\\htmlcss\\css\\assets\\9.png?lastModify=1650254610)")]),e._v(" "),t("p",[t("strong",[e._v("（3）三角 3")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("div {\n  width: 0;\n  height: 0;\n  border-left: 50px solid red;\n  border-top: 50px solid transparent;\n  border-bottom: 50px solid transparent;\n}\n")])])]),t("p",[e._v("![img](file://F:%E5%89%8D%E7%AB%AF%E5%89%8D%E7%AB%AF\\VuePress\\Blog-VuePress\\docs\\htmlcss\\css\\assets\\10.png?lastModify=1650254610)")]),e._v(" "),t("p",[t("strong",[e._v("（4）三角 4")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("div {\n  width: 0;\n  height: 0;\n  border-right: 50px solid red;\n  border-top: 50px solid transparent;\n  border-bottom: 50px solid transparent;\n}\n")])])]),t("p",[e._v("![img](file://F:%E5%89%8D%E7%AB%AF%E5%89%8D%E7%AB%AF\\VuePress\\Blog-VuePress\\docs\\htmlcss\\css\\assets\\11.png?lastModify=1650254610)")]),e._v(" "),t("p",[t("strong",[e._v("（5）三角 5")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("div {\n  width: 0;\n  height: 0;\n  border-top: 100px solid red;\n  border-right: 100px solid transparent;\n}\n")])])]),t("p",[e._v("![img](file://F:%E5%89%8D%E7%AB%AF%E5%89%8D%E7%AB%AF\\VuePress\\Blog-VuePress\\docs\\htmlcss\\css\\assets\\12.png?lastModify=1650254610)")]),e._v(" "),t("p",[e._v("还有很多，就不一一实现了，总体的原则就是通过上下左右边框来控制三角形的方向，用边框的宽度比来控制三角形的角度。")]),e._v(" "),t("h2",{attrs:{id:"_2-实现一个扇形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现一个扇形"}},[e._v("#")]),e._v(" 2. 实现一个扇形")]),e._v(" "),t("p",[e._v("用 CSS 实现扇形的思路和三角形基本一致，就是多了一个圆角的样式，实现一个 90° 的扇形：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("div {\n  border: 100px solid transparent;\n  width: 0;\n  height: 0;\n  border-radius: 100px;\n  border-top-color: red;\n}\n")])])]),t("p",[e._v("![img](file://F:%E5%89%8D%E7%AB%AF%E5%89%8D%E7%AB%AF\\VuePress\\Blog-VuePress\\docs\\htmlcss\\css\\assets\\13.png?lastModify=1650254610)")]),e._v(" "),t("h2",{attrs:{id:"_3-实现一个宽高自适应的正方形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现一个宽高自适应的正方形"}},[e._v("#")]),e._v(" 3. 实现一个宽高自适应的正方形")]),e._v(" "),t("ul",[t("li",[e._v("利用 vw 来实现：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".square {\n  width: 10%;\n  height: 10vw;\n  background: tomato;\n}\n")])])]),t("ul",[t("li",[e._v("利用元素的 margin/padding 百分比是相对父元素 width 的性质来实现：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".square {\n  width: 20%;\n  height: 0;\n  padding-top: 20%;\n  background: orange;\n}\n")])])]),t("ul",[t("li",[e._v("利用子元素的 margin-top 的值来实现：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".square {\n  width: 30%;\n  overflow: hidden;\n  background: yellow;\n}\n.square::after {\n  content: '';\n  display: block;\n  margin-top: 100%;\n}\n")])])]),t("h2",{attrs:{id:"_4-画一条-0-5px-的线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-画一条-0-5px-的线"}},[e._v("#")]),e._v(" 4. 画一条 0.5px 的线")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("采用 transform: scale()的方式")]),e._v("，该方法用来定义元素的 2D 缩放转换：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("transform: scale(0.5, 0.5);\n")])])]),t("ul",[t("li",[t("strong",[e._v("采用 meta viewport 的方式")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<meta\n  name="viewport"\n  content="width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5"\n/>\n')])])]),t("p",[e._v("这样就能缩放到原来的 0.5 倍，如果是 1px 那么就会变成 0.5px。viewport 只针对于移动端，只在移动端上才能看到效果")]),e._v(" "),t("h2",{attrs:{id:"_5-设置小于-12px-的字体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-设置小于-12px-的字体"}},[e._v("#")]),e._v(" 5. 设置小于 12px 的字体")]),e._v(" "),t("p",[e._v("在谷歌下 css 设置字体大小为 12px 及以下时，显示都是一样大小，都是默认 12px。")]),e._v(" "),t("p",[t("strong",[e._v("解决办法：")])]),e._v(" "),t("ul",[t("li",[e._v("使用 Webkit 的内核的-webkit-text-size-adjust 的私有 CSS 属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是 chrome 更新到 27 版本之后就不可以用了。所以高版本 chrome 谷歌浏览器已经不再支持-webkit-text-size-adjust 样式，所以要使用时候慎用。")]),e._v(" "),t("li",[e._v("使用 css3 的 transform 缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用 display：block/inline-block/...；")]),e._v(" "),t("li",[e._v("使用图片：如果是内容固定不变情况下，使用将小于 12px 文字内容切出做图片，这样不影响兼容也不影响美观。")])]),e._v(" "),t("h2",{attrs:{id:"_6-如何解决-1px-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-如何解决-1px-问题"}},[e._v("#")]),e._v(" 6. 如何解决 1px 问题？")]),e._v(" "),t("p",[e._v("1px 问题指的是：在一些 "),t("code",[e._v("Retina屏幕")]),e._v(" 的机型上，移动端页面的 1px 会变得很粗，呈现出不止 1px 的效果。原因很简单——CSS 中的 1px 并不能和移动设备上的 1px 划等号。它们之间的比例关系有一个专门的属性来描述：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.devicePixelRatio = 设备的物理像素 / CSS像素。\n")])])]),t("p",[e._v("打开 Chrome 浏览器，启动移动端调试模式，在控制台去输出这个 "),t("code",[e._v("devicePixelRatio")]),e._v(" 的值。这里选中 iPhone6/7/8 这系列的机型，输出的结果就是 2：")]),e._v(" "),t("p",[e._v("![image](file://F:%E5%89%8D%E7%AB%AF%E5%89%8D%E7%AB%AF\\VuePress\\Blog-VuePress\\docs\\htmlcss\\css\\assets\\14.png?lastModify=1650254610)")]),e._v(" "),t("p",[e._v("这就意味着设置的 1px CSS 像素，在这个设备上实际会用 2 个物理像素单元来进行渲染，所以实际看到的一定会比 1px 粗一些。")]),e._v(" "),t("p",[e._v("**解决**"),t("strong",[e._v("1px 问题的三种思路：")])]),e._v(" "),t("h3",{attrs:{id:"思路一-直接写-0-5px"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路一-直接写-0-5px"}},[e._v("#")]),e._v(" 思路一：直接写 0.5px")]),e._v(" "),t("p",[e._v("如果之前 1px 的样式这样写：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("border: 1px solid #333;\n")])])]),t("p",[e._v("可以先在 JS 中拿到 window.devicePixelRatio 的值，然后把这个值通过 JSX 或者模板语法给到 CSS 的 data 里，达到这样的效果（这里用 JSX 语法做示范）：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<div id="container" data-device="{{window.devicePixelRatio}}"></div>\n')])])]),t("p",[e._v("然后就可以在 CSS 中用属性选择器来命中 devicePixelRatio 为某一值的情况，比如说这里尝试命中 devicePixelRatio 为 2 的情况：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#container[data-device='2'] {\n  border: 0.5px solid #333;\n}\n")])])]),t("p",[e._v("直接把 1px 改成 1/devicePixelRatio 后的值，这是目前为止最简单的一种方法。这种方法的缺陷在于兼容性不行，IOS 系统需要 8 及以上的版本，安卓系统则直接不兼容。")]),e._v(" "),t("h3",{attrs:{id:"思路二-伪元素先放大后缩小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路二-伪元素先放大后缩小"}},[e._v("#")]),e._v(" 思路二：伪元素先放大后缩小")]),e._v(" "),t("p",[e._v("这个方法的可行性会更高，兼容性也更好。唯一的缺点是代码会变多。")]),e._v(" "),t("p",[e._v("思路是"),t("strong",[e._v("先放大、后缩小：*"),t("em",[t("strong",[e._v("在目标元素的后面追加一个 ::after 伪元素，让这个元素布局为 absolute 之后、整个伸展开铺在目标元素上，然后把它的")])]),t("em",[e._v("宽和高都设置为目标元素的两倍，border 值设为 1px。*"),t("em",[t("strong",[e._v("接着借助 CSS 动画特效中的放缩能力，把整个伪元素缩小为原来的 50%。此时，伪元素的宽高刚好可以和原有的目标元素对齐，而 border 也缩小为了 1px 的二分之一")])])]),e._v("，间接地实现了 0.5px 的效果。")])]),e._v(" "),t("p",[e._v("代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#container[data-device="2"] {\n    position: relative;\n}\n#container[data-device="2"]::after{\n      position:absolute;\n      top: 0;\n      left: 0;\n      width: 200%;\n      height: 200%;\n      content:"";\n      transform: scale(0.5);\n      transform-origin: left top;\n      box-sizing: border-box;\n      border: 1px solid #333;\n    }\n}\n')])])]),t("h3",{attrs:{id:"思路三-viewport-缩放来解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路三-viewport-缩放来解决"}},[e._v("#")]),e._v(" 思路三：viewport 缩放来解决")]),e._v(" "),t("p",[e._v("这个思路就是对 meta 标签里几个关键属性下手：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<meta\n  name="viewport"\n  content="initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"\n/>\n')])])]),t("p",[e._v("这里针对像素比为 2 的页面，把整个页面缩放为了原来的 1/2 大小。这样，本来占用 2 个物理像素的 1px 样式，现在占用的就是标准的一个物理像素。根据像素比的不同，这个缩放比例可以被计算为不同的值，用 js 代码实现如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const scale = 1 / window.devicePixelRatio\n// 这里 metaEl 指的是 meta 标签对应的 Dom\nmetaEl.setAttribute(\n  'content',\n  `width=device-width,user-scalable=no,initial-scale=${scale},maximum-scale=${scale},minimum-scale=${scale}`\n)\n")])])]),t("p",[e._v("这样解决了，但这样做的副作用也很大，整个页面被缩放了。这时 1px 已经被处理成物理像素大小，这样的大小在手机上显示边框很合适。但是，一些原本不需要被缩小的内容，比如文字、图片等，也被无差别缩小掉了。")])])}),[],!1,null,null,null);s.default=r.exports}}]);