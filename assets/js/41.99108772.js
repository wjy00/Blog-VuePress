(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{527:function(e,t,o){"use strict";o.r(t);var v=o(54),_=Object(v.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"六、vue-3-0"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#六、vue-3-0"}},[e._v("#")]),e._v(" 六、Vue 3.0")]),e._v(" "),o("h2",{attrs:{id:"_1-vue3-0有什么更新"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue3-0有什么更新"}},[e._v("#")]),e._v(" 1. Vue3.0有什么更新")]),e._v(" "),o("p",[o("strong",[e._v("（1）监测机制的改变")])]),e._v(" "),o("ul",[o("li",[e._v("3.0 将带来基于代理 Proxy的 observer 实现，提供全语言覆盖的反应性跟踪。")]),e._v(" "),o("li",[e._v("消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：")])]),e._v(" "),o("p",[o("strong",[e._v("（2）只能监测属性，不能监测对象")])]),e._v(" "),o("ul",[o("li",[e._v("检测属性的添加和删除；")]),e._v(" "),o("li",[e._v("检测数组索引和长度的变更；")]),e._v(" "),o("li",[e._v("支持 Map、Set、WeakMap 和 WeakSet。")])]),e._v(" "),o("p",[o("strong",[e._v("（3）模板")])]),e._v(" "),o("ul",[o("li",[e._v("作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。")]),e._v(" "),o("li",[e._v("同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。")])]),e._v(" "),o("p",[o("strong",[e._v("（4）对象式的组件声明方式")])]),e._v(" "),o("ul",[o("li",[e._v("vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。")]),e._v(" "),o("li",[e._v("3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易")])]),e._v(" "),o("p",[o("strong",[e._v("（5）其它方面的更改")])]),e._v(" "),o("ul",[o("li",[e._v("支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。")]),e._v(" "),o("li",[e._v("支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。")]),e._v(" "),o("li",[e._v("基于 tree shaking 优化，提供了更多的内置功能。")])]),e._v(" "),o("h2",{attrs:{id:"_2-defineproperty和proxy的区别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-defineproperty和proxy的区别"}},[e._v("#")]),e._v(" 2. defineProperty和proxy的区别")]),e._v(" "),o("p",[e._v("Vue 在实例初始化时遍历 data 中的所有属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。这样当追踪数据发生变化时，setter 会被自动调用。")]),e._v(" "),o("p",[e._v("Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。")]),e._v(" "),o("p",[e._v("但是这样做有以下问题：")]),e._v(" "),o("ol",[o("li",[e._v("添加或删除对象的属性时，Vue 检测不到。因为添加或删除的对象没有在初始化进行响应式处理，只能通过"),o("code",[e._v("$set")]),e._v(" 来调用"),o("code",[e._v("Object.defineProperty()")]),e._v("处理。")]),e._v(" "),o("li",[e._v("无法监控到数组下标和长度的变化。")])]),e._v(" "),o("p",[e._v("Vue3 使用 Proxy 来监控数据的变化。Proxy 是 ES6 中提供的功能，其作用为：用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。相对于"),o("code",[e._v("Object.defineProperty()")]),e._v("，其有以下特点：")]),e._v(" "),o("ol",[o("li",[e._v("Proxy 直接代理整个对象而非对象属性，这样只需做一层代理就可以监听同级结构下的所有属性变化，包括新增属性和删除属性。")]),e._v(" "),o("li",[e._v("Proxy 可以监听数组的变化。")])]),e._v(" "),o("h2",{attrs:{id:"_3-vue3-0-为什么要用-proxy"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue3-0-为什么要用-proxy"}},[e._v("#")]),e._v(" 3. Vue3.0 为什么要用 proxy？")]),e._v(" "),o("p",[e._v("在 Vue2 中， 0bject.defineProperty 会改变原始数据，而 Proxy 是创建对象的虚拟表示，并提供 set 、get 和 deleteProperty 等处理器，这些处理器可在访问或修改原始对象上的属性时进行拦截，有以下特点∶")]),e._v(" "),o("ul",[o("li",[e._v("不需用使用 "),o("code",[e._v("Vue.$set")]),e._v(" 或 "),o("code",[e._v("Vue.$delete")]),e._v(" 触发响应式。")]),e._v(" "),o("li",[e._v("全方位的数组变化检测，消除了Vue2 无效的边界情况。")]),e._v(" "),o("li",[e._v("支持 Map，Set，WeakMap 和 WeakSet。")])]),e._v(" "),o("p",[e._v("Proxy 实现的响应式原理与 Vue2的实现原理相同，实现方式大同小异∶")]),e._v(" "),o("ul",[o("li",[e._v("get 收集依赖")]),e._v(" "),o("li",[e._v("Set、delete 等触发依赖")]),e._v(" "),o("li",[e._v("对于集合类型，就是对集合对象的方法做一层包装：原方法执行后执行依赖相关的收集或触发逻辑。")])]),e._v(" "),o("h2",{attrs:{id:"_4-vue-3-0-中的-vue-composition-api"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue-3-0-中的-vue-composition-api"}},[e._v("#")]),e._v(" 4.  Vue 3.0 中的 Vue Composition API？")]),e._v(" "),o("p",[e._v("在 Vue2 中，代码是 Options API 风格的，也就是通过填充 (option) data、methods、computed 等属性来完成一个 Vue 组件。这种风格使得 Vue 相对于 React极为容易上手，同时也造成了几个问题：")]),e._v(" "),o("ol",[o("li",[e._v("由于 Options API 不够灵活的开发方式，使得Vue开发缺乏优雅的方法来在组件间共用代码。")]),e._v(" "),o("li",[e._v("Vue 组件过于依赖"),o("code",[e._v("this")]),e._v("上下文，Vue 背后的一些小技巧使得 Vue 组件的开发看起来与 JavaScript 的开发原则相悖，比如在"),o("code",[e._v("methods")]),e._v(" 中的"),o("code",[e._v("this")]),e._v("竟然指向组件实例来不指向"),o("code",[e._v("methods")]),e._v("所在的对象。这也使得 TypeScript 在Vue2 中很不好用。")])]),e._v(" "),o("p",[e._v("于是在 Vue3 中，舍弃了 Options API，转而投向 Composition API。Composition API本质上是将 Options API 背后的机制暴露给用户直接使用，这样用户就拥有了更多的灵活性，也使得 Vue3 更适合于 TypeScript 结合。")]),e._v(" "),o("p",[e._v("如下，是一个使用了 Vue Composition API 的 Vue3 组件：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("<template>\n  <button @click=\"increment\">\n    Count: {{ count }}\n  </button>\n</template>\n \n<script>\n// Composition API 将组件属性暴露为函数，因此第一步是导入所需的函数\nimport { ref, computed, onMounted } from 'vue'\n \nexport default {\n  setup() {\n// 使用 ref 函数声明了称为 count 的响应属性，对应于Vue2中的data函数\n    const count = ref(0)\n \n// Vue2中需要在methods option中声明的函数，现在直接声明\n    function increment() {\n      count.value++\n    }\n // 对应于Vue2中的mounted声明周期\n    onMounted(() => console.log('component mounted!'))\n \n    return {\n      count,\n      increment\n    }\n  }\n}\n<\/script>\n")])])]),o("p",[e._v("显而易见，Vue Composition API 使得 Vue3 的开发风格更接近于原生 JavaScript，带给开发者更多地灵活性")]),e._v(" "),o("h2",{attrs:{id:"_5-composition-api与react-hook很像-区别是什么"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_5-composition-api与react-hook很像-区别是什么"}},[e._v("#")]),e._v(" 5. Composition API与React Hook很像，区别是什么")]),e._v(" "),o("p",[e._v("从React Hook的实现角度看，React Hook是根据useState调用的顺序来确定下一次重渲染时的state是来源于哪个useState，所以出现了以下限制")]),e._v(" "),o("ul",[o("li",[e._v("不能在循环、条件、嵌套函数中调用Hook")]),e._v(" "),o("li",[e._v("必须确保总是在你的React函数的顶层调用Hook")]),e._v(" "),o("li",[e._v("useEffect、useMemo等函数必须手动确定依赖关系")])]),e._v(" "),o("p",[e._v("而Composition API是基于Vue的响应式系统实现的，与React Hook的相比")]),e._v(" "),o("ul",[o("li",[e._v("声明在setup函数内，一次组件实例化只调用一次setup，而React Hook每次重渲染都需要调用Hook，使得React的GC比Vue更有压力，性能也相对于Vue来说也较慢")]),e._v(" "),o("li",[e._v("Compositon API的调用不需要顾虑调用顺序，也可以在循环、条件、嵌套函数中使用")]),e._v(" "),o("li",[e._v("响应式系统自动实现了依赖收集，进而组件的部分的性能优化由Vue内部自己完成，而React Hook需要手动传入依赖，而且必须必须保证依赖的顺序，让useEffect、useMemo等函数正确的捕获依赖变量，否则会由于依赖不正确使得组件性能下降。")])]),e._v(" "),o("p",[e._v("虽然Compositon API看起来比React Hook好用，但是其设计思想也是借鉴React Hook的。")])])}),[],!1,null,null,null);t.default=_.exports}}]);