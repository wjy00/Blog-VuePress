(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{529:function(t,e,n){"use strict";n.r(e);var s=n(54),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"三、组件通信"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、组件通信"}},[t._v("#")]),t._v(" 三、组件通信")]),t._v(" "),n("p",[t._v("组件通信的方式如下：")]),t._v(" "),n("h2",{attrs:{id:"_1-props-emit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-props-emit"}},[t._v("#")]),t._v(" （1） props  /  $emit")]),t._v(" "),n("p",[t._v("父组件通过"),n("code",[t._v("props")]),t._v("向子组件传递数据，子组件通过"),n("code",[t._v("$emit")]),t._v("和父组件通信")]),t._v(" "),n("h3",{attrs:{id:"_1-父组件向子组件传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-父组件向子组件传值"}},[t._v("#")]),t._v(" 1. 父组件向子组件传值")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("props")]),t._v("只能是父组件向子组件进行传值，"),n("code",[t._v("props")]),t._v("使得父子组件之间形成了一个单向下行绑定。子组件的数据会随着父组件不断更新。")]),t._v(" "),n("li",[n("code",[t._v("props")]),t._v(" 可以显示定义一个或一个以上的数据，对于接收的数据，可以是各种数据类型，同样也可以传递一个函数。")]),t._v(" "),n("li",[n("code",[t._v("props")]),t._v("属性名规则：若在"),n("code",[t._v("props")]),t._v("中使用驼峰形式，模板中需要使用短横线的形式")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 父组件\n<template>\n    <div id="father">\n        <son :msg="msgData" :fn="myFunction"></son>\n    </div>\n</template>\n\n<script>\nimport son from "./son.vue";\nexport default {\n    name: father,\n    data() {\n        msgData: "父组件数据";\n    },\n    methods: {\n        myFunction() {\n            console.log("vue");\n        }\n    },\n    components: {\n        son\n    }\n};\n<\/script>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 子组件\n<template>\n    <div id="son">\n        <p>{{msg}}</p>\n        <button @click="fn">按钮</button>\n    </div>\n</template>\n<script>\nexport default {\n    name: "son",\n    props: ["msg", "fn"]\n};\n<\/script>\n')])])]),n("h3",{attrs:{id:"_2-子组件向父组件传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-子组件向父组件传值"}},[t._v("#")]),t._v(" 2. 子组件向父组件传值")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("$emit")]),t._v("绑定一个自定义事件，当这个事件被执行的时就会将参数传递给父组件，而父组件通过"),n("code",[t._v("v-on")]),t._v("监听并接收参数。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 父组件\n<template>\n  <div class=\"section\">\n    <com-article :articles=\"articleList\" @onEmitIndex=\"onEmitIndex\"></com-article>\n    <p>{{currentIndex}}</p>\n  </div>\n</template>\n\n<script>\nimport comArticle from './test/article.vue'\nexport default {\n  name: 'comArticle',\n  components: { comArticle },\n  data() {\n    return {\n      currentIndex: -1,\n      articleList: ['红楼梦', '西游记', '三国演义']\n    }\n  },\n  methods: {\n    onEmitIndex(idx) {\n      this.currentIndex = idx\n    }\n  }\n}\n<\/script>\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 父组件\n<template>\n  <div class=\"section\">\n    <com-article :articles=\"articleList\" @onEmitIndex=\"onEmitIndex\"></com-article>\n    <p>{{currentIndex}}</p>\n  </div>\n</template>\n\n<script>\nimport comArticle from './test/article.vue'\nexport default {\n  name: 'comArticle',\n  components: { comArticle },\n  data() {\n    return {\n      currentIndex: -1,\n      articleList: ['红楼梦', '西游记', '三国演义']\n    }\n  },\n  methods: {\n    onEmitIndex(idx) {\n      this.currentIndex = idx\n    }\n  }\n}\n<\/script>\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//子组件\n<template>\n  <div>\n    <div v-for="(item, index) in articles" :key="index" @click="emitIndex(index)">{{item}}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\'articles\'],\n  methods: {\n    emitIndex(index) {\n      this.$emit(\'onEmitIndex\', index) // 触发父组件的方法，并传递参数index\n    }\n  }\n}\n<\/script>\n')])])]),n("h2",{attrs:{id:"_2-eventbus事件总线-emit-on"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-eventbus事件总线-emit-on"}},[t._v("#")]),t._v(" （2）eventBus事件总线（$emit / $on）")]),t._v(" "),n("p",[n("code",[t._v("eventBus")]),t._v("事件总线适用于"),n("strong",[t._v("父子组件")]),t._v("、"),n("strong",[t._v("非父子组件")]),t._v("等之间的通信，使用步骤如下：")]),t._v(" "),n("p",[n("strong",[t._v("（1）创建事件中心管理组件之间的通信")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// event-bus.js\n\nimport Vue from 'vue'\nexport const EventBus = new Vue()\n")])])]),n("p",[n("strong",[t._v("（2）发送事件")])]),t._v(" "),n("p",[t._v("假设有两个兄弟组件"),n("code",[t._v("firstCom")]),t._v("和"),n("code",[t._v("secondCom")]),t._v("：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <first-com></first-com>\n    <second-com></second-com>\n  </div>\n</template>\n\n<script>\nimport firstCom from './firstCom.vue'\nimport secondCom from './secondCom.vue'\nexport default {\n  components: { firstCom, secondCom }\n}\n<\/script>\n")])])]),n("p",[t._v("在"),n("code",[t._v("firstCom")]),t._v("组件中发送事件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <button @click=\"add\">加法</button>    \n  </div>\n</template>\n\n<script>\nimport {EventBus} from './event-bus.js' // 引入事件中心\n\nexport default {\n  data(){\n    return{\n      num:0\n    }\n  },\n  methods:{\n    add(){\n      EventBus.$emit('addition', {\n        num:this.num++\n      })\n    }\n  }\n}\n<\/script>\n")])])]),n("p",[n("strong",[t._v("（3）接收事件")])]),t._v(" "),n("p",[t._v("在"),n("code",[t._v("secondCom")]),t._v("组件中发送事件：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>求和: {{count}}</div>\n</template>\n\n<script>\nimport { EventBus } from './event-bus.js'\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  mounted() {\n    EventBus.$on('addition', param => {\n      this.count = this.count + param.num;\n    })\n  }\n}\n<\/script>\n")])])]),n("p",[t._v("在上述代码中，这就相当于将"),n("code",[t._v("num")]),t._v("值存贮在了事件总线中，在其他组件中可以直接访问。事件总线就相当于一个桥梁，不同组件通过它来通信。")]),t._v(" "),n("p",[t._v("虽然看起来比较简单，但是这种方法也有不便之处，如果项目过大，使用这种方式进行通信，后期维护起来会很困难。")]),t._v(" "),n("h2",{attrs:{id:"_3-依赖注入-provide-inject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-依赖注入-provide-inject"}},[t._v("#")]),t._v(" （3）依赖注入（provide / inject）")]),t._v(" "),n("p",[t._v("这种方式就是Vue中的"),n("strong",[t._v("依赖注入")]),t._v("，该方法用于"),n("strong",[t._v("父子组件之间的通信")]),t._v("。当然这里所说的父子不一定是真正的父子，也可以是祖孙组件，在层数很深的情况下，可以使用这种方法来进行传值。就不用一层一层的传递了。")]),t._v(" "),n("p",[n("code",[t._v("provide / inject")]),t._v("是Vue提供的两个钩子，和"),n("code",[t._v("data")]),t._v("、"),n("code",[t._v("methods")]),t._v("是同级的。并且"),n("code",[t._v("provide")]),t._v("的书写形式和"),n("code",[t._v("data")]),t._v("一样。")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("provide")]),t._v(" 钩子用来发送数据或方法")]),t._v(" "),n("li",[n("code",[t._v("inject")]),t._v("钩子用来接收数据或方法")])]),t._v(" "),n("p",[t._v("在父组件中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("provide() {\n return {\n    num: this.num\n  };\n}\n")])])]),n("p",[t._v("在子组件中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("inject: ['num']\n")])])]),n("p",[t._v("还可以这样写，这样写就可以访问父组件中的所有属性：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("provide() {\n return {\n    app: this\n  };\n}\ndata() {\n return {\n    num: 1\n  };\n}\n\ninject: ['app']\nconsole.log(this.app.num)\n")])])]),n("p",[n("strong",[t._v("注意：")]),t._v(" 依赖注入所提供的属性是"),n("strong",[t._v("非响应式")]),t._v("的。")]),t._v(" "),n("h2",{attrs:{id:"_3-ref-refs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-ref-refs"}},[t._v("#")]),t._v(" （3）ref / $refs")]),t._v(" "),n("p",[t._v("这种方式也是实现"),n("strong",[t._v("父子组件")]),t._v("之间的通信。")]),t._v(" "),n("p",[n("code",[t._v("ref")]),t._v("： 这个属性用在子组件上，它的引用就指向了子组件的实例。可以通过实例来访问组件的数据和方法。")]),t._v(" "),n("p",[t._v("在子组件中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export default {\n  data () {\n    return {\n      name: 'JavaScript'\n    }\n  },\n  methods: {\n    sayHello () {\n      console.log('hello')\n    }\n  }\n}\n")])])]),n("p",[t._v("在父组件中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <child ref=\"child\"></component-a>\n</template>\n<script>\n  import child from './child.vue'\n  export default {\n    components: { child },\n    mounted () {\n      console.log(this.$refs.child.name);  // JavaScript\n      this.$refs.child.sayHello();  // hello\n    }\n  }\n<\/script>\n")])])]),n("h2",{attrs:{id:"_4-parent-children"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-parent-children"}},[t._v("#")]),t._v(" （4）$parent / $children")]),t._v(" "),n("ul",[n("li",[t._v("使用"),n("code",[t._v("$parent")]),t._v("可以让组件访问父组件的实例（访问的是上一级父组件的属性和方法）")]),t._v(" "),n("li",[t._v("使用"),n("code",[t._v("$children")]),t._v("可以让组件访问子组件的实例，但是，"),n("code",[t._v("$children")]),t._v("并不能保证顺序，并且访问的数据也不是响应式的。")])]),t._v(" "),n("p",[t._v("在子组件中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <span>{{message}}</span>\n    <p>获取父组件的值为:  {{parentVal}}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Vue'\n    }\n  },\n  computed:{\n    parentVal(){\n      return this.$parent.msg;\n    }\n  }\n}\n<\/script>\n")])])]),n("p",[t._v("在父组件中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 父组件中\n<template>\n  <div class=\"hello_world\">\n    <div>{{msg}}</div>\n    <child></child>\n    <button @click=\"change\">点击改变子组件值</button>\n  </div>\n</template>\n\n<script>\nimport child from './child.vue'\nexport default {\n  components: { child },\n  data() {\n    return {\n      msg: 'Welcome'\n    }\n  },\n  methods: {\n    change() {\n      // 获取到子组件\n      this.$children[0].message = 'JavaScript'\n    }\n  }\n}\n<\/script>\n")])])]),n("p",[t._v("在上面的代码中，子组件获取到了父组件的"),n("code",[t._v("parentVal")]),t._v("值，父组件改变了子组件中"),n("code",[t._v("message")]),t._v("的值。")]),t._v(" "),n("p",[n("strong",[t._v("需要注意：")])]),t._v(" "),n("ul",[n("li",[t._v("通过"),n("code",[t._v("$parent")]),t._v("访问到的是上一级父组件的实例，可以使用"),n("code",[t._v("$root")]),t._v("来访问根组件的实例")]),t._v(" "),n("li",[t._v("在组件中使用"),n("code",[t._v("$children")]),t._v("拿到的是所有的子组件的实例，它是一个数组，并且是无序的")]),t._v(" "),n("li",[t._v("在根组件"),n("code",[t._v("#app")]),t._v("上拿"),n("code",[t._v("$parent")]),t._v("得到的是"),n("code",[t._v("new Vue()")]),t._v("的实例，在这实例上再拿"),n("code",[t._v("$parent")]),t._v("得到的是"),n("code",[t._v("undefined")]),t._v("，而在最底层的子组件拿"),n("code",[t._v("$children")]),t._v("是个空数组")]),t._v(" "),n("li",[n("code",[t._v("$children")]),t._v(" 的值是"),n("strong",[t._v("数组")]),t._v("，而"),n("code",[t._v("$parent")]),t._v("是个"),n("strong",[t._v("对象")])])]),t._v(" "),n("h2",{attrs:{id:"_5-attrs-listeners"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-attrs-listeners"}},[t._v("#")]),t._v(" （5）$attrs / $listeners")]),t._v(" "),n("p",[t._v("考虑一种场景，如果A是B组件的父组件，B是C组件的父组件。如果想要组件A给组件C传递数据，这种隔代的数据，该使用哪种方式呢？")]),t._v(" "),n("p",[t._v("如果是用"),n("code",[t._v("props/$emit")]),t._v("来一级一级的传递，确实可以完成，但是比较复杂；如果使用事件总线，在多人开发或者项目较大的时候，维护起来很麻烦；如果使用Vuex，的确也可以，但是如果仅仅是传递数据，那可能就有点浪费了。")]),t._v(" "),n("p",[t._v("针对上述情况，Vue引入了"),n("code",[t._v("$attrs / $listeners")]),t._v("，实现组件之间的跨代通信。")]),t._v(" "),n("p",[t._v("先来看一下"),n("code",[t._v("inheritAttrs")]),t._v("，它的默认值true，继承所有的父组件属性除"),n("code",[t._v("props")]),t._v("之外的所有属性；"),n("code",[t._v("inheritAttrs：false")]),t._v(" 只继承class属性 。")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("$attrs")]),t._v("：继承所有的父组件属性（除了prop传递的属性、class 和 style ），一般用在子组件的子元素上")]),t._v(" "),n("li",[n("code",[t._v("$listeners")]),t._v("：该属性是一个对象，里面包含了作用在这个组件上的所有监听器，可以配合 "),n("code",[t._v('v-on="$listeners"')]),t._v(" 将所有的事件监听器指向这个组件的某个特定的子元素。（相当于子组件继承父组件的事件）")])]),t._v(" "),n("p",[t._v("A组件（"),n("code",[t._v("APP.vue")]),t._v("）：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div id="app">\n        //此处监听了两个事件，可以在B组件或者C组件中直接触发 \n        <child1 :p-child1="child1" :p-child2="child2" @test1="onTest1" @test2="onTest2"></child1>\n    </div>\n</template>\n<script>\nimport Child1 from \'./Child1.vue\';\nexport default {\n    components: { Child1 },\n    methods: {\n        onTest1() {\n            console.log(\'test1 running\');\n        },\n        onTest2() {\n            console.log(\'test2 running\');\n        }\n    }\n};\n<\/script>\n')])])]),n("p",[t._v("B组件（"),n("code",[t._v("Child1.vue")]),t._v("）：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n    <div class=\"child-1\">\n        <p>props: {{pChild1}}</p>\n        <p>$attrs: {{$attrs}}</p>\n        <child2 v-bind=\"$attrs\" v-on=\"$listeners\"></child2>\n    </div>\n</template>\n<script>\nimport Child2 from './Child2.vue';\nexport default {\n    props: ['pChild1'],\n    components: { Child2 },\n    inheritAttrs: false,\n    mounted() {\n        this.$emit('test1'); // 触发APP.vue中的test1方法\n    }\n};\n<\/script>\n")])])]),n("p",[t._v("C 组件 ("),n("code",[t._v("Child2.vue")]),t._v(")：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n    <div class=\"child-2\">\n        <p>props: {{pChild2}}</p>\n        <p>$attrs: {{$attrs}}</p>\n    </div>\n</template>\n<script>\nexport default {\n    props: ['pChild2'],\n    inheritAttrs: false,\n    mounted() {\n        this.$emit('test2');// 触发APP.vue中的test2方法\n    }\n};\n<\/script>\n")])])]),n("p",[t._v("在上述代码中：")]),t._v(" "),n("ul",[n("li",[t._v("C组件中能直接触发test的原因在于 B组件调用C组件时 使用 v-on 绑定了"),n("code",[t._v("$listeners")]),t._v(" 属性")]),t._v(" "),n("li",[t._v("在B组件中通过v-bind 绑定"),n("code",[t._v("$attrs")]),t._v("属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的）")])]),t._v(" "),n("h2",{attrs:{id:"_6-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-总结"}},[t._v("#")]),t._v(" （6）总结")]),t._v(" "),n("p",[n("strong",[t._v("（1）父子组件间通信")])]),t._v(" "),n("ul",[n("li",[t._v("子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事件来向父组件发送数据。")]),t._v(" "),n("li",[t._v("通过 ref 属性给子组件设置一个名字。父组件通过 $refs 组件名来获得子组件，子组件通过 $parent 获得父组件，这样也可以实现通信。")]),t._v(" "),n("li",[t._v("使用 provide/inject，在父组件中通过 provide提供变量，在子组件中通过 inject 来将变量注入到组件中。不论子组件有多深，只要调用了 inject 那么就可以注入 provide中的数据。")])]),t._v(" "),n("p",[n("strong",[t._v("（2）兄弟组件间通信")])]),t._v(" "),n("ul",[n("li",[t._v("使用 eventBus 的方法，它的本质是通过创建一个空的 Vue 实例来作为消息传递的对象，通信的组件引入这个实例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。")]),t._v(" "),n("li",[t._v("通过 $parent/$refs 来获取到兄弟组件，也可以进行通信。")])]),t._v(" "),n("p",[n("strong",[t._v("（3）任意组件之间")])]),t._v(" "),n("ul",[n("li",[t._v("使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。")])]),t._v(" "),n("p",[t._v("如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候可以使用 vuex ，vuex 的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。")])])}),[],!1,null,null,null);e.default=a.exports}}]);